/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package org.ugra.uzh.server;

import java.util.*;
import java.io.*;
import java.net.*;
import java.util.logging.Logger;
import java.util.concurrent.Executors;
import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import java.nio.charset.StandardCharsets;
import java.security.*;
import com.sun.net.httpserver.*;

import org.ugra.uzh.UzhWorld;

public class App {
    private static final int PORT = 9276;

    public static void main(String[] args) throws IOException {
        HttpServer server = HttpServer.create(new InetSocketAddress(PORT), 0);
        server.createContext("/scores/", new ScoresHandler());
        var executor = Executors.newCachedThreadPool();
        server.setExecutor(executor);
        var logger = Logger.getLogger("App");
        logger.info("Starting server on port " + PORT + "...");
        server.start();
    }

    static class ScoresHandler implements HttpHandler {
        private Logger logger;

        public ScoresHandler() {
            logger = Logger.getLogger("ScoresHandler");
        }

        private static Map<String, String> splitQuery(URI url) throws UnsupportedEncodingException {
            Map<String, String> query_pairs = new LinkedHashMap<String, String>();
            String query = url.getQuery();
            if (query == null) {
                return query_pairs;
            }
            String[] pairs = query.split("&");
            for (String pair : pairs) {
                int idx = pair.indexOf("=");
                query_pairs.put(pair.substring(0, idx), pair.substring(idx + 1));
            }
            return query_pairs;
        }

        private static final String FLAG1_PREFIX = "ugra_send_via_infrared_";
        private static final String FLAG2_PREFIX = "ugra_it_gets_longer_";
        private static final byte[] FLAG1_SECRET2 = "fur love look angry".getBytes(StandardCharsets.UTF_8);
        private static final byte[] FLAG2_SECRET2 = "comfortable coach aid weigh".getBytes(StandardCharsets.UTF_8);
        private static final int SALT2_SIZE = 6;
        private static final int NEEDED_FRUITS = 10;

        private static String getFlag(String prefix, byte[] secret, String token) {
            Mac sha256_HMAC;
            try {
                sha256_HMAC = Mac.getInstance("HmacSHA256");
            } catch (NoSuchAlgorithmException e) {
                throw new RuntimeException(e);
            }
            SecretKeySpec secret_key = new SecretKeySpec(secret, "HmacSHA256");
            try {
                sha256_HMAC.init(secret_key);
            } catch (InvalidKeyException e) {
                throw new RuntimeException(e);
            }

            String fullToken = token;
            while (fullToken.length() < 6) {
                fullToken = "0" + fullToken;
            }
            byte[] hash = sha256_HMAC.doFinal(fullToken.getBytes(StandardCharsets.UTF_8));

            // Convert the byte array to hex string
            StringBuilder hexString = new StringBuilder();
            for (byte b : hash) {
                String hex = Integer.toHexString(0xff & b);
                if(hex.length() == 1) {
                    hexString.append('0');
                }
                hexString.append(hex);
            }

            return prefix + hexString.toString().substring(0, SALT2_SIZE);
        }

        @Override
        public void handle(HttpExchange t) throws IOException {
            try {
                logger.info("Handling request from " + t.getRemoteAddress());

                if (!t.getRequestMethod().equalsIgnoreCase("POST")) {
                    logger.warning("Invalid request method: " + t.getRequestMethod());
                    t.sendResponseHeaders(405, -1);
                    return;
                }
                var content_type = t.getRequestHeaders().getFirst("Content-Type");
                if (!content_type.equalsIgnoreCase("application/octet-stream")) {
                    logger.warning("Invalid content type: " + content_type);
                    t.sendResponseHeaders(415, -1);
                    return;
                }
                // Get the secret key as a "secret" query parameter.
                var raw_secret_key = splitQuery(t.getRequestURI()).get("secret");
                if (raw_secret_key == null) {
                    logger.warning("No secret key provided");
                    t.sendResponseHeaders(403, -1);
                    return;
                }
                // Decode an integer secret key.
                int secret_key;
                try {
                    secret_key = Integer.parseInt(raw_secret_key);
                } catch (NumberFormatException e) {
                    logger.warning("Invalid secret key: " + raw_secret_key);
                    t.sendResponseHeaders(403, -1);
                    return;
                }

                // Read the request body as a byte stream.
                var input = t.getRequestBody();
                var request_body = new ByteArrayOutputStream();
                try {
                    var buffer = new byte[1024];
                    int len;
                    while ((len = input.read(buffer)) != -1) {
                        request_body.write(buffer, 0, len);
                    }
                } finally {
                    input.close();
                }

                // Get the byte array.
                var moves = request_body.toByteArray();
                if (moves.length == 0) {
                    logger.warning("No moves provided");
                    t.sendResponseHeaders(400, -1);
                    return;
                }
                var world = new UzhWorld(secret_key, moves[0]);
                for (int i = 1; i < moves.length; i++) {
                    if (!world.advance(moves[i]) && i != moves.length - 1) {
                        logger.warning("Invalid move: " + moves[i]);
                        t.sendResponseHeaders(400, -1);
                        return;
                    }
                }

                String response;
                if (world.getEatenFruits() >= NEEDED_FRUITS) {
                    response = "You got them all!\n" + getFlag(FLAG2_PREFIX, FLAG2_SECRET2, raw_secret_key);
                } else {
                    response = "Keep it on and get " + (NEEDED_FRUITS - world.getEatenFruits()) + " more!\n" + getFlag(FLAG1_PREFIX, FLAG1_SECRET2, raw_secret_key);
                }

                logger.info("Sending response: " + response);
                t.sendResponseHeaders(200, response.length());
                OutputStream os = t.getResponseBody();
                try {
                    os.write(response.getBytes());
                } finally {
                    os.close();
                }
            } catch (Exception e) {
                logger.warning("Exception: " + e);
                t.sendResponseHeaders(500, -1);
            }
        }
    }
}
